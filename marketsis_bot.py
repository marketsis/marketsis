import telebot
import json
import os
import yfinance as yf
import datetime
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from sklearn.metrics import mean_absolute_error, median_absolute_error, mean_absolute_percentage_error, mean_squared_error
from prophet import Prophet
from math import sqrt
from telebot import types
import matplotlib


matplotlib.use('Agg')

TOKEN = ''

bot = telebot.TeleBot(TOKEN)

forecasting_final = None

@bot.message_handler(commands=['start'])
def start(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    briefBtn = types.KeyboardButton(text="üìñ –û –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ")
    trendTickersBtn = types.KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã")
    keyboard.add(briefBtn, trendTickersBtn)
    user = message.from_user.first_name     
    
    bot.send_message(chat_id=message.from_user.id, text= f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user}. –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == "üìñ –û –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ")
def sendBrief(message):
    bot.send_message(message.chat.id, '''marketsis - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ü–∏—è—Ö –∏ –∏—Ö –¥–∏–Ω–∞–º–∏–∫–µ –¥–≤–∏–∂–µ–Ω–∏—è, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –¥–∞–Ω–Ω—ã–µ –æ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π. –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∞–∫—Ü–∏–π, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–æ–ª–µ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å c –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∞–∫—Ü–∏–∏ (—Ç–∏–∫–µ—Ä–æ–º), –≤—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ –¥–æ—Å—Ç—Ä–æ–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∞–∫—Ü–∏–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø—É–Ω–∫—Ç—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–º –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏ - –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –∞–∫—Ü–∏–π —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–ü–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–µ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏. –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å "–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö" (MAPE) –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–∫–∏ –ø—Ä—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ö–æ–¥–µ –µ–µ –æ–±—É—á–µ–Ω–∏—è. –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.

–ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.''')


@bot.message_handler(func=lambda message: message.text == "üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã")
def sendTrendTickers(message):
    bot.send_message(message.chat.id, text=f"–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π:\n\nhttps://finance.yahoo.com/lookup")


def modelQualityAssessment(forecasting_final):
    MAE = mean_absolute_error(forecasting_final['yhat'],forecasting_final['y'])
    print('Mean Absolute Error (MAE): ' + str(np.round(MAE, 2)))

    MEDAE = median_absolute_error(forecasting_final['yhat'],forecasting_final['y'])
    print('Median Absolute Error (MedAE): ' + str(np.round(MEDAE, 2)))

    MSE = mean_squared_error(forecasting_final['yhat'],forecasting_final['y'])
    print('Mean Squared Error (MSE): ' + str(np.round(MSE, 2)))

    RMSE = sqrt(int(mean_squared_error(forecasting_final['yhat'],forecasting_final['y'])))
    print('Root Mean Squared Error (RMSE): ' + str(np.round(RMSE, 2)))

    MAPE = mean_absolute_percentage_error(forecasting_final['yhat'],forecasting_final['y'])
    print('Mean Absolute Percentage Error (MAPE): ' + str(np.round(MAPE, 2)) + ' %')
    
    qualityAssessmentMessage = f'''Mean Absolute Error (MAE): {str(np.round(MAE, 2))}
Median Absolute Error (MedAE): {str(np.round(MEDAE, 2))}
Mean Squared Error (MSE): {str(np.round(MSE, 2))}
Root Mean Squared Error (RMSE): {str(np.round(RMSE, 2))}
Mean Absolute Percentage Error (MAPE): {str(np.round(MAPE, 2))} %
    '''
    return qualityAssessmentMessage

def generateCharts(hist, forecast, ticker, model):
    fig, ax = plt.subplots(figsize=(12, 6))

    ax.plot(hist.ds, hist.y, label='–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ') 
    ax.plot(forecast.ds, forecast.yhat, linestyle='--', label='–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ')  
    ax.fill_between(forecast.ds, forecast['yhat_upper'], forecast['yhat_lower'], alpha=0.2)
    ax.legend(loc='upper left')
    ax.set_title(ticker)
    plt.savefig("plot.png")
    fig = model.plot_components(forecast)
    plt.savefig("plot_components.png")

    plt.close()

def getPredictInfo(hist, forecast, ticker):
    entryDate = hist.iloc[-1]['ds'].date()
    entryPrice = round(hist.iloc[-1]['y'],2)
    targetDate = forecast.iloc[-1]['ds'].date()
    targetPrice = round(forecast.iloc[-1]['yhat'],2)
    profitForecast = round((targetPrice-entryPrice)/entryPrice*100, 2)
    profitForecastString = f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {profitForecast} %" if profitForecast > 0 else f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —É–±—ã—Ç–æ–∫: {profitForecast} %"
    global forecasting_final
    forecasting_final = pd.merge(forecast, hist, how='inner', left_on = 'ds', right_on = 'ds')
    
    predictInfoMessage = f'''–¢–∏–∫–µ—Ä: {ticker}
–î–∞—Ç–∞: {entryDate}
–í—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: {entryPrice}
–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è –¥–∞—Ç–∞: {targetDate}
–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {targetPrice}
{profitForecastString}'''
    return predictInfoMessage

def getHistoricalData(stock, actualPer):
    hist = stock.history(period=actualPer) 
    hist.reset_index(inplace=True)
    hist = hist[["Date", "Close"]]
    hist.rename(columns={"Date":"ds", "Close":"y"}, inplace=True)

    hist = hist.dropna(how='any')
    hist['ds'] = pd.to_datetime(hist['ds'])
    hist['ds'] = hist['ds'].dt.tz_localize(None)
    # hist1 = hist
    # hist = hist.query("ds <= '2022-09-06'")
    return hist

def genMarkup(ticker):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton(f"üì∞ C–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π {ticker}", callback_data=f"getRelevantNews {ticker}"),
               InlineKeyboardButton(f"üè¶ C–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π {ticker}", callback_data=f"getInstitutionalHolders {ticker}"),
               InlineKeyboardButton(f"‚ö†Ô∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏", callback_data=f"getModelQualityAssessment"))
    return markup

def forecastPeriodMarkup(ticker):
    markup = InlineKeyboardMarkup()
    markup.row_width = 3
    markup.add(InlineKeyboardButton(f"6 –º–µ—Å.", callback_data=f"half-year {ticker}"),
            InlineKeyboardButton(f"1 –≥–æ–¥", callback_data=f"year {ticker}"),
            InlineKeyboardButton(f"2 –≥–æ–¥–∞", callback_data=f"2years {ticker}"))
    return markup

stockItem = lambda t : yf.Ticker(t)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        if call.data.split(' ')[0] == "getRelevantNews":
            # ticker = call.data.split(' ')[1]
            # stock = yf.Ticker(ticker)
            
            news = stockItem(call.data.split(' ')[1]).get_news()
            bot.send_message(call.from_user.id, text=f"üì∞ C–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π {call.data.split(' ')[1]}")
            for item in news:
                bot.send_message(call.from_user.id, text=f'''{str(item['title'])}
{str(item['link'])}

–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(datetime.datetime.fromtimestamp(item['providerPublishTime']))}
–ò—Å—Ç–æ—á–Ω–∏–∫: {str(item['publisher'])}''')

            bot.answer_callback_query(call.id, f"–í—ã–≤–µ–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å {call.data.split(' ')[1]}")
        elif call.data.split(' ')[0] == "getInstitutionalHolders":
            # ticker = call.data.split(' ')[1]
            # stock = yf.Ticker(ticker)
            holders = stockItem(call.data.split(' ')[1]).get_institutional_holders()
            bot.send_message(call.from_user.id, text=f"üè¶ C–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {call.data.split(' ')[1]}")
            for index, item in holders.iterrows():
                bot.send_message(call.from_user.id, text=f'''–î–µ—Ä–∂–∞—Ç–µ–ª—å: {str(item['Holder'])}
–ö–æ–ª-–≤–æ –∞–∫—Ü–∏–π: {str(item['Shares'])}
–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(item['Date Reported'])}
–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–π –¥–æ–ª–∏: {str(item['% Out'])}
–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤: {str(item['Value'])}''')
        elif call.data == "getModelQualityAssessment" and not forecasting_final.empty:
            bot.send_message(call.from_user.id, text=f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è –æ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n{modelQualityAssessment(forecasting_final)}")
        elif call.data.split(' ')[0] == "half-year":
            constuctModel(stockItem(call.data.split(' ')[1]), call.data.split(' ')[1], call.from_user.id, "1y", 183)
        elif call.data.split(' ')[0] == "year":
            constuctModel(stockItem(call.data.split(' ')[1]), call.data.split(' ')[1], call.from_user.id, "2y", 365)
        elif call.data.split(' ')[0] == "2years":
            constuctModel(stockItem(call.data.split(' ')[1]), call.data.split(' ')[1], call.from_user.id, "4y", 730)
        else:
            bot.answer_callback_query(call.id, f"–û–ø—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∞–∫—Ü–∏–∏")
    except:
        bot.answer_callback_query(call.id, f"–û–ø—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∞–∫—Ü–∏–∏")

def constuctModel(stock, ticker, chatId, actualPer, futurePer):
    try:

        plotConponentsMessage = f'''–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞;
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤;
- –ï–∂–µ–≥–æ–¥–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å;
- –ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å.'''

        hist = getHistoricalData(stock, actualPer)
        model = Prophet(
            yearly_seasonality=20, 
            changepoint_prior_scale=0.05,  
            seasonality_mode='multiplicative', 
            weekly_seasonality=False,
            daily_seasonality=False, 
            holidays_prior_scale=0.05, 
        )

        model.add_country_holidays(country_name='USA')
        model.add_seasonality(name='quarterly', period=91, fourier_order=6)
        model.fit(hist)

        bot.send_message(chatId, text=f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∞–Ω–∞–ª–∏–∑...")

        future = model.make_future_dataframe(periods=futurePer)
        forecast = model.predict(future)

        plt.style.use('https://github.com/dhaitz/matplotlib-stylesheets/raw/master/pitayasmoothie-dark.mplstyle')

        generateCharts(hist, forecast, ticker, model)

        bot.send_message(chat_id=chatId, text=getPredictInfo(hist, forecast, ticker))
        with open('plot.png', 'rb') as f:
            bot.send_photo(chatId, f)

        last_message_id = bot.send_message(chat_id=chatId, text=plotConponentsMessage).message_id
        with open('plot_components.png', 'rb') as f:
            bot.send_photo(chatId, f, reply_markup=genMarkup(ticker))
    
    except Exception as ex:
        print(ex)

@bot.message_handler()
def handle_message(message):

    try:
        if os.path.exists("plot.png"):
            os.remove("plot.png")
            os.remove("plot_components.png")
        else:
            print("file not found")
    except: 
        print("plt updated")

    try:
        ticker = str(message.text).strip().upper()
        stock = None

        tickerNotFoundMessage = f'''–ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π {ticker} –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.

- –í–æ–∑–º–æ–∂–Ω–æ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ä–∞?
- –ê–∫—Ü–∏–∏ {ticker} —Å–Ω—è—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤?
- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ {ticker}?
- {ticker} - —ç—Ç–æ –∞–∫—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏? –î–æ–±–∞–≤—å—Ç–µ ".ME" –∫ —Ç–∏–∫–µ—Ä—É ({ticker}.ME)

–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ —Å–∞–π—Ç–µ: 
https://finance.yahoo.com/'''

        try:
            stock = yf.Ticker(ticker)
            info = stock.info
        except:
            bot.send_message(chat_id=message.from_user.id, text=tickerNotFoundMessage)
            return

        bot.send_message(message.from_user.id, text=f"–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥", reply_markup=forecastPeriodMarkup(ticker))

    except Exception as ex:
        print(ex)

bot.infinity_polling()